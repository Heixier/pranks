(()=>{"use strict";var e={306:(e,t,n)=>{n.r(t),n.d(t,{LightDMMessageType:()=>l,LightDMPromptType:()=>d,_ready_event:()=>r,greeter_comm:()=>a,greeter_config:()=>s,lightdm:()=>i,theme_utils:()=>o});const i=window.lightdm,s=window.greeter_config,o=window.theme_utils,a=window.greeter_comm,r=window._ready_event,d={Question:0,Secret:1},l={Info:0,Error:1}},915:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Authenticator=void 0;const i=n(306);class s{constructor(){this._authenticating=!1,this._authenticated=!1,this._authEvents=null,this._username="",this._password="",this._session="ubuntu",this._initLightDMListeners()}_initLightDMListeners(){i.lightdm.show_prompt.connect(((e,t)=>{try{switch(t){case i.LightDMPromptType.Question:console.log("LightDM requested username, responding..."),i.lightdm.respond(this._username);break;case i.LightDMPromptType.Secret:console.log("LightDM requested password, responding..."),i.lightdm.respond(this._password);break;default:console.error(`Unknown lightDM prompt type: ${t}`)}}catch(e){console.error(e),this._authEvents&&this._authEvents.errorMessage(String(e))}})),i.lightdm.show_message.connect(((e,t)=>{try{switch(t){case i.LightDMMessageType.Info:console.log(`LightDM info message: ${e}`),this._authEvents&&this._authEvents.infoMessage(e);break;case i.LightDMMessageType.Error:console.error(`LightDM error message: ${e}`),this._authEvents&&this._authEvents.errorMessage(e);break;default:console.warn(`Unknown lightDM message type: ${t}, message: ${e}`)}}catch(e){console.error(e),this._authEvents&&this._authEvents.errorMessage(String(e))}})),i.lightdm.authentication_complete.connect((()=>{var e;try{this._authenticating=!1,console.log("LightDM authentication complete. Checking results..."),i.lightdm.is_authenticated?(this._authenticated=!0,console.log("LightDM authentication successful! Starting session..."),this._authEvents&&this._authEvents.authenticationComplete(),i.lightdm.start_session(null!==(e=this._session)&&void 0!==e?e:null)):(console.log("LightDM authentication failed. User not found or password incorrect."),this._stopAuthentication(),this._authEvents&&this._authEvents.authenticationFailure())}catch(e){console.error(e),this._authEvents&&this._authEvents.errorMessage(String(e))}}))}get authenticating(){return this._authenticating}get authenticated(){return this._authenticated}get username(){return this._username}set authEvents(e){this._authEvents=e}_clearAuth(){this._username="",this._password=""}_stopAuthentication(){i.lightdm.cancel_authentication(),this._authenticating=!1,this._authenticated=!1,this._clearAuth()}_startAuthentication(){try{console.log("Starting LightDM authentication..."),i.lightdm.cancel_authentication(),this._authenticating=!0,i.lightdm.authenticate(this._username)}catch(e){console.error(e),this._authEvents&&this._authEvents.errorMessage(String(e))}}login(e,t){this._username=e.substring(0,s.MAX_LEN_USERNAME).trim(),this._password=t.substring(0,s.MAX_LEN_PASSWORD),this._authenticating||this._authenticated?console.warn("Login() was called while already authenticating or authenticated. Stopping authentication."):""!==this._username&&""!==this._password?(this._authEvents&&this._authEvents.authenticationStart(),this._startAuthentication()):console.log("Login() was called while username or password is empty. Stopping authentication.")}}t.Authenticator=s,s.MAX_LEN_USERNAME=32,s.MAX_LEN_PASSWORD=128},397:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Data=t.GreeterImage=void 0;const s=i(n(330)),o=n(306);class a{constructor(e){var t;this._path=e;const n=this._path.split("/").slice(0,-1).join("/"),i=null===(t=window.theme_utils)||void 0===t?void 0:t.dirlist_sync(n,!1);this._exists=void 0!==i&&i.includes(this._path),this._exists?console.log(`Found image at "${this._path}"`):console.warn("Wallpaper file does not exist: "+this._path)}get path(){return this._path}get exists(){return this._exists}}t.GreeterImage=a,t.Data=class{constructor(){this._dataJsonFetchInterval=6e4,this._dataChangeListeners=[],this.pkgName=s.default.name,this.pkgVersion=s.default.version,this.hostname=o.lightdm.hostname,this.loginScreenWallpaper=new a("/usr/share/codam/web-greeter/login-screen.png"),this.userLockScreenWallpaper=new a("/tmp/codam-web-greeter-user-wallpaper"),this.examLockScreenWallpaper=new a("/usr/share/codam/web-greeter/exam-wallpaper.png"),this.examStripe=new a("/usr/share/codam/web-greeter/exam-stripe.png"),this.logo=new a("/usr/share/codam/web-greeter/logo.png"),this.userImage=new a("/tmp/codam-web-greeter-user-avatar"),this.userDefaultImage=new a("/usr/share/codam/web-greeter/user.png"),setInterval((()=>this._refetchDataJson()),this._dataJsonFetchInterval),this._refetchDataJson()}static examToEvent(e){const t=`For ${e.projects.map((e=>e.name)).join(", ")}`;return{id:e.id,name:e.name,description:t,location:e.location,kind:"exam",max_people:e.max_people,nbr_subscribers:e.nbr_subscribers,begin_at:e.begin_at,end_at:e.end_at,campus_ids:[],cursus_ids:e.cursus.map((e=>e.id)),created_at:e.created_at,updated_at:e.updated_at}}addDataChangeListener(e){this._dataChangeListeners.push(e)}removeDataChangeListener(e){this._dataChangeListeners=this._dataChangeListeners.filter((t=>t!==e))}get dataJson(){return this._dataJson}_refetchDataJson(){fetch("data.json").then((e=>e.json())).then((e=>{if(console.log("Fetched data.json",e),"error"in e)return console.warn("data.json response contains an error",e),void window.ui.setDebugInfo(`data.json response contains an error: ${e.error}`);"message"in e||(e.message=""),this._dataJson=e;for(const e of this._dataChangeListeners)e(this._dataJson)})).catch((e=>{window.ui&&window.ui.setDebugInfo(`Error fetching data.json: ${e}`)}))}}},877:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Idler=void 0,t.Idler=class{constructor(e=!1){this._idle=!1,this._lastActivity=Date.now(),this._idleAfter=3e5,this._takeActionAfter=252e4,this._isLockScreen=e,window.addEventListener("keydown",this._unidle.bind(this)),window.addEventListener("mousemove",this._unidle.bind(this)),window.addEventListener("mousedown",this._unidle.bind(this)),setInterval(this._checkIdle.bind(this),1e3)}get idleAfter(){return this._idleAfter}get idle(){return this._idle}_unidle(){this._lastActivity=Date.now(),this._idle=!1}_action(){}_checkIfActionNeeded(){return!!(this._idle&&Date.now()-this._lastActivity>=this._takeActionAfter)&&(this._action(),!0)}_checkIdle(){return this._idle?(this._checkIfActionNeeded(),!0):Date.now()-this._lastActivity>=this._idleAfter&&(this._idle=!0,console.log("Now idling..."),this._checkIfActionNeeded(),!0)}}},80:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(s,o){function a(e){try{d(i.next(e))}catch(e){o(e)}}function r(e){try{d(i.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,r)}d((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=n(397),o=n(455),a=n(915),r=n(877);window.sleep=function(e){return i(this,void 0,void 0,(function*(){return new Promise((t=>{setTimeout(t,e)}))}))},window.restartComputer=()=>{var e,t;try{return(null===(e=window.lightdm)||void 0===e?void 0:e.can_restart)?(null===(t=window.lightdm)||void 0===t||t.restart(),!0):(window.ui.setDebugInfo("Rebooting failed: lightdm.can_restart is false"),!1)}catch(e){return window.ui.setDebugInfo(`Rebooting failed: ${e}`),!1}},window.brightness={decrease:()=>{var e,t;(null===(e=window.lightdm)||void 0===e?void 0:e.can_access_brightness)?null===(t=window.lightdm)||void 0===t||t.brightness_decrease(10):window.ui.setDebugInfo("Brightness control failed: lightdm.can_access_brightness is false")},increase:()=>{var e,t;(null===(e=window.lightdm)||void 0===e?void 0:e.can_access_brightness)?null===(t=window.lightdm)||void 0===t||t.brightness_increase(10):window.ui.setDebugInfo("Brightness control failed: lightdm.can_access_brightness is false")}},window.addEventListener("GreeterReady",(()=>{!function(){i(this,void 0,void 0,(function*(){window.data=new s.Data,window.auth=new a.Authenticator,window.ui=new o.UI(window.data,window.auth),window.idler=new r.Idler(window.ui.isLockScreen),window.debugKeys=!1,document.addEventListener("keydown",(e=>{var t,n;const i="INPUT"===(null===(t=document.activeElement)||void 0===t?void 0:t.tagName)&&"password"===(null===(n=document.activeElement)||void 0===n?void 0:n.getAttribute("type"));if(window.debugKeys&&!i&&window.ui.setDebugInfo(`Key pressed: ${e.code} (${e.key})${e.ctrlKey?" + Ctrl":""}${e.altKey?" + Alt":""}${e.shiftKey?" + Shift":""}${e.metaKey?" + Meta":""}`),e.ctrlKey&&e.altKey)switch(e.key){case"Delete":window.debugKeys&&(window.ui.setDebugInfo("Reboot requested through LightDM"),window.restartComputer());break;case"e":window.debugKeys&&(window.ui.setDebugInfo("Exam mode override enabled"),window.ui.overrideExamMode());break;case"d":window.debugKeys=!window.debugKeys,window.ui.setDebugInfo("Debug keys: "+(window.debugKeys?"enabled":"disabled"));break;case"l":return void window.debugKeys}else switch(e.key){case"BrightnessDown":case"F1":case"F14":window.brightness.decrease();break;case"BrightnessUp":case"F2":case"F15":window.brightness.increase()}}))}))}()}))},455:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UI=void 0;const i=n(703),s=n(828),o=n(622),a=n(306),r=n(335),d=n(495),l=n(100);class c{constructor(e,t){this._lockScreen=null,this._loginScreen=null,this._examModeScreen=null,this._isLockScreen=!1,this._examModeDisabled=!1,this._scalingFactor=1,this._infoBars=new i.InfoBarsUI,this._logo=document.getElementById("logo"),this._message=document.getElementById("message"),this.applyHiDpiScaling(),e.logo.exists&&(this._logo.src=e.logo.path);const n=a.lightdm.users.find((e=>e.logged_in));void 0!==n?(this._lockScreen=new s.LockScreenUI(t,n),this._isLockScreen=!0,this._logo.style.display="none",this._lockScreen.showForm()):(this._loginScreen=new o.LoginScreenUI(t),this._examModeScreen=new l.ExamModeUI(t,this._loginScreen),e.addDataChangeListener((e=>{this.checkForExamMode()})),setInterval((()=>{this.checkForExamMode()}),c.EXAM_MODE_CHECK_INTERVAL),this.checkForExamMode()),e.addDataChangeListener((e=>{void 0!==e&&this.setMessage(e.message)})),void 0!==e.dataJson&&this.setMessage(e.dataJson.message),this._wallpaper=new r.WallpaperUI(this._isLockScreen),this._calendar=new d.CalendarUI(e)}get isLockScreen(){return this._isLockScreen}overrideExamMode(){this._examModeDisabled=!0,this.checkForExamMode()}setDebugInfo(e){this._infoBars.setDebugInfo(e)}setMessage(e){e=(e=(e=(e=(e=e.replace(/(<([^>]+)>)/gi,"")).replace(/\n/g,"<br>")).replace(/\*(.*?)\*/g,"<b>$1</b>")).replace(/_(.*?)_/g,"<i>$1</i>")).replace(/  +/g,"&nbsp;&nbsp;"),this._message.innerHTML=e}getMessage(){return this._message.innerText}checkForExamMode(){var e,t,n,i,s,o;if(this.isLockScreen)return!1;if(void 0===window.data.dataJson)return null===(e=this._examModeScreen)||void 0===e||e.hideForm(),null===(t=this._loginScreen)||void 0===t||t.showForm(),!1;const a=window.data.dataJson.exams_for_host.filter((e=>{const t=new Date,n=new Date(e.begin_at),i=new Date(n.getTime()-60*c.SHOW_EXAM_MODE_MINUTES_BEFORE_BEGIN*1e3),s=new Date(e.end_at);return t>=i&&t<s}));return!this._examModeDisabled&&a.length>0?((null===(n=this._examModeScreen)||void 0===n?void 0:n.examMode)&&a.some((e=>{var t;return null===(t=this._examModeScreen)||void 0===t?void 0:t.examIds.includes(e.id)}))||(console.log("Activating exam mode login UI"),null===(i=this._examModeScreen)||void 0===i||i.enableExamMode(a)),!0):((null===(s=this._examModeScreen)||void 0===s?void 0:s.examMode)&&(console.log("Deactivating exam mode login UI"),null===(o=this._examModeScreen)||void 0===o||o.disableExamMode()),!1)}static getPadding(e=document.body){return getComputedStyle(e).getPropertyValue("--padding")}setPrimaryThemeColor(e){const t=document.documentElement;null===e?t.style.setProperty("--color-primary","var(--color-blue)"):t.style.setProperty("--color-primary",e)}getPrimaryThemeColor(){return getComputedStyle(document.documentElement).getPropertyValue("--color-primary")}get scalingFactor(){return this._scalingFactor}applyHiDpiScaling(){if(window.outerWidth>2560||1!=window.devicePixelRatio){const e=window.devicePixelRatio>1?window.devicePixelRatio:1.5;document.body.style.zoom=`${e}`,document.documentElement.style.setProperty("--zoom",`${e}`),this._scalingFactor=e}}}t.UI=c,c.EXAM_MODE_CHECK_INTERVAL=5e3,c.SHOW_EXAM_MODE_MINUTES_BEFORE_BEGIN=20},495:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarUI=void 0;const i=n(397),s=n(455);t.CalendarUI=class{constructor(e){this._calendar=document.getElementById("intra-calendar"),this.populateCalendar(),e.addDataChangeListener(this.populateCalendar.bind(this))}_estimateDuration(e,t){const n=t.getTime()-e.getTime(),i=Math.floor(n/1e3/60/60/24),s=Math.floor(n/1e3/60/60),o=Math.floor(n/1e3/60);return i>1?`${i} days`:s>0?`About ${s} hour${1===s?"":"s"}`:o>0?`About ${o} minute${1===o?"":"s"}`:""}_removeMarkdownSyntax(e){return(e=(e=(e=e.replace(/\*\*(.*?)\*\*/g,"$1")).replace(/\*(.*?)\*/g,"$1")).replace(/\_(.*?)\_/g,"$1")).replace(/\[(.*?)\]\((.*?)\)/g,"$1 ($2)")}_eventFitsOnScreen(e=void 0){const t=window.innerHeight,n=parseInt(getComputedStyle(this._calendar).getPropertyValue("--header-footer-height"))*window.ui.scalingFactor,i=this._calendar.clientHeight*window.ui.scalingFactor,o=78*window.ui.scalingFactor,a=parseInt(s.UI.getPadding(this._calendar))*window.ui.scalingFactor,r=o+a,d=t-i-2*n-2*a;return console.debug("Calculated if event fits on screen","availableWindowHeight",t,"calendarHeight",i,"eventHeight",o,"eventMargin",a,"requiredSpace",r,"spaceLeft",d,"scalingFactor",window.ui.scalingFactor),r<d}populateCalendar(e=window.data.dataJson){if(void 0===e)return void this._destroyAllEvents();const t=[];for(const n of e.events)t.push(this._createEventElement(n));for(const n of e.exams){const e=i.Data.examToEvent(n);t.push(this._createEventElement(e))}t.sort(((e,t)=>{var n,i;return parseInt(null!==(n=e.getAttribute("data-event-timestamp"))&&void 0!==n?n:"0")-parseInt(null!==(i=t.getAttribute("data-event-timestamp"))&&void 0!==i?i:"0")})),this._destroyAllEvents();for(const e of t){if(!this._eventFitsOnScreen(e)){console.log("Event doesn't fit on screen");break}this._calendar.appendChild(e)}}_destroyAllEvents(){const e=this._calendar.getElementsByClassName("calendar-event");for(;e.length>0;)e[0].remove()}_createEventElement(e){var t;const n=new Date(e.begin_at),i=new Date(e.end_at),s=document.createElement("div");s.classList.add("calendar-event"),s.setAttribute("data-event-kind",e.name.toLowerCase().includes("bocal stand-up")?"standup":e.kind),s.setAttribute("data-event-id",e.id.toString()),s.setAttribute("data-event-timestamp",n.getTime().toString());const o=document.createElement("div");o.classList.add("calendar-event-date"),s.appendChild(o);const a=document.createElement("span");a.classList.add("calendar-event-date-day"),a.innerText=n.toLocaleString("en-NL",{weekday:"short"}),o.appendChild(a);const r=document.createElement("span");r.classList.add("calendar-event-date-date"),r.innerText=n.toLocaleString("en-NL",{day:"numeric"}),o.appendChild(r);const d=document.createElement("span");d.classList.add("calendar-event-date-month"),d.innerText=n.toLocaleString("en-NL",{month:"short"}),o.appendChild(d);const l=document.createElement("div");l.classList.add("calendar-event-wrapper"),s.appendChild(l);const c=document.createElement("div");c.classList.add("calendar-event-title"),c.innerText=e.name,l.appendChild(c);const u=document.createElement("div");u.classList.add("calendar-event-description"),u.innerText=this._removeMarkdownSyntax(e.description),l.appendChild(u);const h=document.createElement("div");h.classList.add("calendar-event-details"),l.appendChild(h);const m=document.createElement("span");m.classList.add("calendar-event-time"),m.innerText=n.toLocaleString("en-NL",{timeStyle:"short"}),h.appendChild(m);const g=document.createElement("span");g.classList.add("calendar-event-duration"),g.innerText=this._estimateDuration(n,i),h.appendChild(g);const _=document.createElement("span");_.classList.add("calendar-event-spots"),_.innerText=e.max_people?`${e.nbr_subscribers} / ${e.max_people}`:"",h.appendChild(_);const p=document.createElement("span");return p.classList.add("calendar-event-location"),p.innerText=null!==(t=e.location)&&void 0!==t?t:"",h.appendChild(p),this._addDialogToEvent(s),s}_addDialogToEvent(e){e.addEventListener("click",(()=>{var t;console.log("Clicked event",e);const n=document.createElement("dialog");n.classList.add("calendar-event-dialog"),n.setAttribute("data-event-kind",null!==(t=e.getAttribute("data-event-kind"))&&void 0!==t?t:"event");const i=document.createElement("button");i.classList.add("dialog-close-button"),i.innerHTML="&times;",n.appendChild(i);const s=document.createElement("div");s.classList.add("event-dialog-contents"),n.appendChild(s);for(const t of e.children)s.appendChild(t.cloneNode(!0));s.addEventListener("click",(e=>{e.stopPropagation()})),n.addEventListener("click",(e=>{n.close(),n.remove()})),document.body.appendChild(n),n.showModal()}))}_addDialogToEvents(){const e=this._calendar.getElementsByClassName("calendar-event");for(let t=0;t<e.length;t++){const n=e[t];this._addDialogToEvent(n)}}}},703:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InfoBarsUI=void 0,t.InfoBarsUI=class{constructor(){this._infoElements={hostname:document.getElementById("info-hostname"),version:document.getElementById("info-version"),clock:document.getElementById("info-clock"),date:document.getElementById("info-date"),networkIcon:document.getElementById("info-network-icon"),debug:document.getElementById("info-debug")},this._populateInfoElements()}setDebugInfo(e){this._infoElements.debug.innerText=e,console.debug("Changed text in debug info: ",e)}_populateInfoElements(){this._infoElements.debug.innerText="",window.addEventListener("error",(e=>{this._infoElements.debug.innerText+=e.error+"\n"})),this._infoElements.version.innerText=window.data.pkgName+" v"+window.data.pkgVersion,this._infoElements.hostname.innerText=window.data.hostname,this._updateClock(),setInterval((()=>this._updateClock()),1e3),this._infoElements.networkIcon.innerHTML=navigator.onLine?"&#128423;":"",window.addEventListener("online",(()=>this._infoElements.networkIcon.innerHTML="&#128423;")),window.addEventListener("offline",(()=>this._infoElements.networkIcon.innerHTML=""))}_updateClock(){const e=new Date;this._infoElements.date.innerText=e.toLocaleString("en-NL",{dateStyle:"medium"}),this._infoElements.clock.innerText=e.toLocaleString("en-NL",{timeStyle:"medium"})}}},69:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UIScreen=void 0,t.UIScreen=class{constructor(e){this._formShown=!1,this._auth=e}_connectEvents(){this._auth.authEvents=this._events}_disconnectEvents(){this._auth.authEvents=null}showForm(){if(!this._formShown){this._formShown=!0,this._form.form.style.display="block";const e=this._getInputToFocusOn();null!==e&&e.focus(),this._connectEvents()}}hideForm(){this._formShown&&(this._formShown=!1,this._form.form.style.display="none",this._disconnectEvents())}get formShown(){return this._formShown}_disableForm(){for(const e of Object.values(this._form))"disabled"in e&&"boolean"==typeof e.disabled&&(e.disabled=!0);document.activeElement&&document.activeElement.blur()}_enableForm(e=null){for(const e of Object.values(this._form))"disabled"in e&&"boolean"==typeof e.disabled&&(e.disabled=!1);null!==e&&e.focus()}}},100:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExamModeUI=void 0;const i=n(69);class s extends i.UIScreen{constructor(e,t){super(e),this._examMode=!1,this._examIds=[],this._events={authenticationStart:()=>{this._disableForm()},authenticationComplete:()=>{},authenticationFailure:()=>{this._enableForm(),this._wigglePasswordInput()},errorMessage:e=>{alert(e),window.ui.setDebugInfo(e)},infoMessage:e=>{alert(e)}},this._loginScreen=t,this._form={form:document.getElementById("exam-form"),examProjectsText:document.getElementById("exam-mode-projects"),examStartText:document.getElementById("exam-mode-start"),examEndText:document.getElementById("exam-mode-end"),loginInput:document.getElementById("exam-login"),passwordInput:document.getElementById("exam-password"),examStartButton:document.getElementById("exam-mode-start-button")},this._initForm()}enableExamMode(e){if(0!==e.length){if(window.data.examLockScreenWallpaper){let e=window.data.examLockScreenWallpaper,t=window.data.examStripe;e.exists&&(document.body.style.backgroundImage='url("'+e.path+'")');let n=document.getElementById("intra-calendar");if(n&&(n.style.display="none"),t.exists){let e=document.getElementById("top-stripe"),n=document.getElementById("bottom-stripe");e&&n&&(e.style.background='url("'+t.path+'") repeat-x',n.style.background='url("'+t.path+'") repeat-x',e.style.backgroundSize="150px",n.style.backgroundSize="150px")}}this._examMode=!0,this._examIds=e.map((e=>e.id)),this._populateData(e),this._loginScreen.hideForm(),this.showForm()}}disableExamMode(){let e=window.data.loginScreenWallpaper;e.exists?document.body.style.backgroundImage='url("'+e.path+'")':(document.body.style.backgroundColor="black",document.body.style.backgroundImage="none");let t=document.getElementById("intra-calendar");t&&t.style.removeProperty("display"),this._examMode=!1,this._examIds=[],this._populateData([]),this.hideForm(),this._loginScreen.showForm()}get examMode(){return this._examMode}get examIds(){return this._examIds}_initForm(){const e=this._form;e.examStartButton.addEventListener("click",(t=>{t.preventDefault(),this._examMode&&(e.loginInput.value===s.EXAM_USERNAME&&e.passwordInput.value===s.EXAM_PASSWORD?this._auth.login(s.EXAM_USERNAME,s.EXAM_PASSWORD):this._wigglePasswordInput())})),e.loginInput.addEventListener("input",(()=>{this._enableOrDisableSubmitButton()})),e.passwordInput.addEventListener("input",(()=>{this._enableOrDisableSubmitButton()}))}_populateData(e){var t;const n=this._form;if(0===e.length)n.examProjectsText.innerText="",n.examStartText.innerText="unknown",n.examEndText.innerText="unknown";else{const i=null===(t=window.data.dataJson)||void 0===t?void 0:t.exams.filter((t=>e.some((e=>t.id===e.id))));if(void 0===i)return console.error("Failed to find exams in data.json"),void window.ui.setDebugInfo("Failed to find exams in data.json");const s=i.reduce(((e,t)=>{const n=new Date(t.begin_at);return null===e||n<e?n:e}),new Date(i[0].begin_at)),o=i.reduce(((e,t)=>{const n=new Date(t.end_at);return null===e||n>e?n:e}),new Date(i[0].end_at)),a=i.flatMap((e=>e.projects.map((e=>e.name)))).join(", ");n.examProjectsText.innerText=a,n.examStartText.innerText=s.toLocaleTimeString("en-NL",{hour:"2-digit",minute:"2-digit"}),n.examEndText.innerText=o.toLocaleTimeString("en-NL",{hour:"2-digit",minute:"2-digit"})}}_enableOrDisableSubmitButton(){return this._form.examStartButton.disabled=!1,!1}_wigglePasswordInput(e=!0){const t=this._form.passwordInput;t.classList.add("wiggle"),t.addEventListener("keydown",(()=>{t.classList.remove("wiggle")}),{once:!0}),e&&(t.value="",t.focus(),this._enableOrDisableSubmitButton())}_getInputToFocusOn(){return null}}t.ExamModeUI=s,s.EXAM_USERNAME="exam",s.EXAM_PASSWORD="exam"},828:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LockScreenUI=void 0;const i=n(69),s=n(455);class o extends i.UIScreen{constructor(e,t){super(e),this._isExamMode=!1,this._lockedTime=null,this._events={authenticationStart:()=>{this._disableForm()},authenticationComplete:()=>{},authenticationFailure:()=>{this._enableForm(),this._wigglePasswordInput()},errorMessage:e=>{alert(e),window.ui.setDebugInfo(e)},infoMessage:e=>{alert(e)}},this._activeSession=t,this._form={form:document.getElementById("lock-form"),avatar:document.getElementById("active-user-session-avatar"),displayName:document.getElementById("active-user-session-display-name"),loginName:document.getElementById("active-user-session-login-name"),lockedTimeAgo:document.getElementById("active-user-session-locked-ago"),passwordInput:document.getElementById("active-user-session-password"),unlockButton:document.getElementById("unlock-button")},this._initForm(),setInterval(this._getAndSetLockedTimestamp.bind(this),6e4),this._getAndSetLockedTimestamp()}_initForm(){var e;const t=this._form;"exam"===this._activeSession.username?(this._isExamMode=!0,t.avatar.style.display="none",t.displayName.innerText="Exam in progress",t.loginName.innerText="Click the arrow below to resume your exam.",t.loginName.style.marginTop=s.UI.getPadding(),t.passwordInput.value="exam",t.passwordInput.style.display="none",this._enableOrDisableSubmitButton()):(t.avatar.addEventListener("error",(()=>{console.warn(`Failed to load avatar for user ${this._activeSession.username}`),t.avatar.src="assets/default-user.png"})),window.data.userImage.exists?t.avatar.src=window.data.userImage.path:this._activeSession.image?t.avatar.src=this._activeSession.image:window.data.userDefaultImage.exists&&(t.avatar.src=window.data.userDefaultImage.path),t.displayName.innerText=null!==(e=this._activeSession.display_name)&&void 0!==e?e:this._activeSession.username,t.loginName.innerText=this._activeSession.username),setInterval(this._lockedTimer.bind(this),1e4),t.form.addEventListener("submit",(e=>{e.preventDefault(),this._auth.login(this._activeSession.username,t.passwordInput.value)})),t.passwordInput.addEventListener("input",(()=>{this._enableOrDisableSubmitButton()}))}_enableOrDisableSubmitButton(){const e=this._form,t=""===e.passwordInput.value&&!1===this._isExamMode;return e.unlockButton.disabled=t,t}_wigglePasswordInput(e=!0){const t=this._form.passwordInput;t.classList.add("wiggle"),t.addEventListener("keydown",(()=>{t.classList.remove("wiggle")}),{once:!0}),e&&(t.value="",t.focus(),this._enableOrDisableSubmitButton())}_getInputToFocusOn(){return this._form.passwordInput}get lockedTime(){return this._lockedTime}_getScreenLockedTimestamp(e){return new Promise(((t,n)=>{fetch(`/tmp/codam_web_greeter_lock_timestamp_${e}`).then((e=>e.text())).then((e=>{const n=e.split(" ")[0];t(new Date(1e3*parseInt(n)))})).catch((()=>{n()}))}))}_getAndSetLockedTimestamp(){this._getScreenLockedTimestamp(this._activeSession.username).then((e=>{this._lockedTime=e,this._lockedTimer()})).catch((()=>{this._lockedTime=null}))}_lockedTimer(){if(!this._lockedTime)return;const e=42-(Date.now()-this._lockedTime.getTime())/1e3/60;if(e<=.25)this._disableForm(),this._form.lockedTimeAgo.innerText="Automated logout in progress...",e<-5&&(window.ui.setDebugInfo("Automated logout appears to take a while. Is the systemd idling service from codam-web-greeter installed and enabled?"),this._enableForm());else{const t=Math.floor(e);this._form.lockedTimeAgo.innerText="Automated logout occurs in "+t.toString()+" minute"+(1===t?"":"s")}}}t.LockScreenUI=o},622:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LoginScreenUI=void 0;const i=n(69);class s extends i.UIScreen{constructor(e){super(e),this._events={authenticationStart:()=>{this._disableForm()},authenticationComplete:()=>{},authenticationFailure:()=>{this._enableForm(),this._wigglePasswordInput()},errorMessage:e=>{alert(e),window.ui.setDebugInfo(e)},infoMessage:e=>{alert(e)}},this._form={form:document.getElementById("login-form"),loginInput:document.getElementById("login"),passwordInput:document.getElementById("password"),loginButton:document.getElementById("login-button")},this._initForm()}_initForm(){const e=this._form;this._form.form.addEventListener("submit",(t=>{t.preventDefault(),this._auth.login(e.loginInput.value,e.passwordInput.value)})),e.loginInput.addEventListener("input",(()=>{this._enableOrDisableSubmitButton()})),e.passwordInput.addEventListener("input",(()=>{this._enableOrDisableSubmitButton()}))}_enableOrDisableSubmitButton(){const e=this._form,t=""===e.loginInput.value.trim()||""===e.passwordInput.value;return e.loginButton.disabled=t,t}_wigglePasswordInput(e=!0){const t=this._form.passwordInput;t.classList.add("wiggle"),t.addEventListener("keydown",(()=>{t.classList.remove("wiggle")}),{once:!0}),e&&(t.value="",t.focus(),this._enableOrDisableSubmitButton())}_getInputToFocusOn(){const e=this._form;return""===e.loginInput.value.trim()?e.loginInput:e.passwordInput}}t.LoginScreenUI=s},335:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WallpaperUI=void 0,t.WallpaperUI=class{constructor(e,t=null){this._element=null!=t?t:document.body,this._blurFilter=document.getElementById("blur-filter"),this._isLockScreen=e,this.displayWallpaper()}displayWallpaper(){let e=window.data.loginScreenWallpaper;return this._isLockScreen&&(this._blurFilter.style.display="block",window.data.userLockScreenWallpaper.exists&&(e=window.data.userLockScreenWallpaper)),e.exists?this._element.style.backgroundImage='url("'+e.path+'")':this._element.style.backgroundImage=window.getComputedStyle(this._element).getPropertyValue("--default-bg-img"),!0}}},330:e=>{e.exports=JSON.parse('{"name":"codam-web-greeter","version":"1.3.0","description":"LightDM greeter theme for Codam Coding College, compatible with nody-greeter and web-greeter","main":"main.js","scripts":{"build":"tsc","bundle":"webpack --mode=production","bundle-dev":"webpack --mode=development","test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"git+https://github.com/codam-coding-college/codam-web-greeter.git"},"keywords":["codam","42born2code","lightdm","nody-greeter-theme","web-greeter-theme","lightdm-greeter"],"author":"Codam Coding College","license":"MIT","bugs":{"url":"https://github.com/codam-coding-college/codam-web-greeter/issues"},"homepage":"https://github.com/codam-coding-college/codam-web-greeter#readme","devDependencies":{"nody-greeter-types":"^1.1.0","ts-loader":"^9.5.0","typescript":"^4.9.5","webpack":"^5.94.0","webpack-cli":"^5.1.4"}}')}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(80)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,